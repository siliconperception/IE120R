import torch
import torch.nn as nn
from huggingface_hub import PyTorchModelHubMixin
from collections import OrderedDict

# PyTorch model for Silicon Perception IE120-R single chip image encoder
# www.siliconperception.com
class IE120R(
    nn.Module,
    PyTorchModelHubMixin, 
    repo_url="https://github.com/siliconperception/models",
    license="mit",
):
    def __init__(self,alt='medium'):
        super().__init__()
        if alt=='large':
            self.layer1  = nn.Sequential(nn.Conv2d(3, 16, kernel_size=3, stride=2, padding=1), nn.BatchNorm2d(16), nn.ReLU())
            self.layer2  = nn.Sequential(nn.Conv2d(16, 16, kernel_size=3, stride=1, padding=1), nn.BatchNorm2d(16), nn.ReLU())
            self.layer3  = nn.Sequential(nn.Conv2d(16, 16, kernel_size=3, stride=1, padding=1), nn.BatchNorm2d(16), nn.ReLU())
            self.layer4  = nn.Sequential(nn.Conv2d(16, 32, kernel_size=3, stride=2, padding=1), nn.BatchNorm2d(32), nn.ReLU())
            self.layer5  = nn.Sequential(nn.Conv2d(32, 32, kernel_size=3, stride=1, padding=1), nn.BatchNorm2d(32), nn.ReLU())
            self.layer6  = nn.Sequential(nn.Conv2d(32, 32, kernel_size=3, stride=1, padding=1), nn.BatchNorm2d(32), nn.ReLU())
            self.layer7  = nn.Sequential(nn.Conv2d(32, 96, kernel_size=3, stride=2, padding=1), nn.BatchNorm2d(96), nn.ReLU())
            self.layer8  = nn.Sequential(nn.Conv2d(96, 96, kernel_size=3, stride=1, padding=1), nn.BatchNorm2d(96), nn.ReLU())
            self.layer9  = nn.Sequential(nn.Conv2d(96, 96, kernel_size=3, stride=1, padding=1), nn.BatchNorm2d(96), nn.ReLU())
            self.layerf0  = nn.Conv2d(96, 64, kernel_size=1, stride=1, padding=0)
            self.layer10 = nn.Sequential(nn.Conv2d(96, 128, kernel_size=3, stride=2, padding=1), nn.BatchNorm2d(128), nn.ReLU())
            self.layer11 = nn.Sequential(nn.Conv2d(128, 128, kernel_size=3, stride=1, padding=1), nn.BatchNorm2d(128), nn.ReLU())
            self.layer12 = nn.Sequential(nn.Conv2d(128, 128, kernel_size=3, stride=1, padding=1), nn.BatchNorm2d(128), nn.ReLU())
            self.layerf1  = nn.Conv2d(128, 64, kernel_size=1, stride=1, padding=0)
            self.layer13 = nn.Sequential(nn.Conv2d(128, 256, kernel_size=3, stride=2, padding=1), nn.BatchNorm2d(256), nn.ReLU())
            self.layer14 = nn.Sequential(nn.Conv2d(256, 256, kernel_size=3, stride=1, padding=1), nn.BatchNorm2d(256), nn.ReLU())
            self.layer15 = nn.Sequential(nn.Conv2d(256, 256, kernel_size=3, stride=1, padding=1), nn.BatchNorm2d(256), nn.ReLU())
            self.layerf2  = nn.Conv2d(256, 128, kernel_size=1, stride=1, padding=0)
            self.layer16 = nn.Sequential(nn.Conv2d(256, 512, kernel_size=3, stride=2, padding=1), nn.BatchNorm2d(512), nn.ReLU())
            self.layer17 = nn.Sequential(nn.Conv2d(512, 512, kernel_size=3, stride=1, padding=1), nn.BatchNorm2d(512), nn.ReLU())
            self.layer18 = nn.Sequential(nn.Conv2d(512, 512, kernel_size=3, stride=1, padding=1), nn.BatchNorm2d(512), nn.ReLU())
            self.layerf3  = nn.Conv2d(512, 256, kernel_size=1, stride=1, padding=0)
            self.layer19 = nn.Sequential(nn.Conv2d(512, 1024, kernel_size=3, stride=2, padding=1), nn.BatchNorm2d(1024), nn.ReLU())
            self.layer20 = nn.Sequential(nn.Conv2d(1024, 1024, kernel_size=3, stride=1, padding=1), nn.BatchNorm2d(1024), nn.ReLU())
            self.layer21 = nn.Sequential(nn.Conv2d(1024, 1024, kernel_size=3, stride=1, padding=1), nn.BatchNorm2d(1024), nn.ReLU())
            self.layerf4  = nn.Conv2d(1024, 512, kernel_size=1, stride=1, padding=0)
        if alt=='medium':
            self.layer1  = nn.Sequential(nn.Conv2d(3, 16, kernel_size=3, stride=2, padding=1), nn.BatchNorm2d(16), nn.ReLU())
            self.layer2  = nn.Sequential(nn.Conv2d(16, 16, kernel_size=3, stride=1, padding=1), nn.BatchNorm2d(16), nn.ReLU())
            self.layer3  = nn.Sequential(nn.Conv2d(16, 16, kernel_size=3, stride=1, padding=1), nn.BatchNorm2d(16), nn.ReLU())
            self.layer4  = nn.Sequential(nn.Conv2d(16, 32, kernel_size=3, stride=2, padding=1), nn.BatchNorm2d(32), nn.ReLU())
            self.layer5  = nn.Sequential(nn.Conv2d(32, 32, kernel_size=3, stride=1, padding=1), nn.BatchNorm2d(32), nn.ReLU())
            self.layer6  = nn.Sequential(nn.Conv2d(32, 32, kernel_size=3, stride=1, padding=1), nn.BatchNorm2d(32), nn.ReLU())
            self.layer7  = nn.Sequential(nn.Conv2d(32, 80, kernel_size=3, stride=2, padding=1), nn.BatchNorm2d(80), nn.ReLU())
            self.layer8  = nn.Sequential(nn.Conv2d(80, 80, kernel_size=3, stride=1, padding=1), nn.BatchNorm2d(80), nn.ReLU())
            self.layer9  = nn.Sequential(nn.Conv2d(80, 80, kernel_size=3, stride=1, padding=1), nn.BatchNorm2d(80), nn.ReLU())
            self.layerf0  = nn.Conv2d(80, 64, kernel_size=1, stride=1, padding=0)
            self.layer10 = nn.Sequential(nn.Conv2d(80, 120, kernel_size=3, stride=2, padding=1), nn.BatchNorm2d(120), nn.ReLU())
            self.layer11 = nn.Sequential(nn.Conv2d(120, 120, kernel_size=3, stride=1, padding=1), nn.BatchNorm2d(120), nn.ReLU())
            self.layer12 = nn.Sequential(nn.Conv2d(120, 120, kernel_size=3, stride=1, padding=1), nn.BatchNorm2d(120), nn.ReLU())
            self.layerf1  = nn.Conv2d(120, 64, kernel_size=1, stride=1, padding=0)
            self.layer13 = nn.Sequential(nn.Conv2d(120, 160, kernel_size=3, stride=2, padding=1), nn.BatchNorm2d(160), nn.ReLU())
            self.layer14 = nn.Sequential(nn.Conv2d(160, 160, kernel_size=3, stride=1, padding=1), nn.BatchNorm2d(160), nn.ReLU())
            self.layer15 = nn.Sequential(nn.Conv2d(160, 160, kernel_size=3, stride=1, padding=1), nn.BatchNorm2d(160), nn.ReLU())
            self.layerf2  = nn.Conv2d(160, 128, kernel_size=1, stride=1, padding=0)
            self.layer16 = nn.Sequential(nn.Conv2d(160, 320, kernel_size=3, stride=2, padding=1), nn.BatchNorm2d(320), nn.ReLU())
            self.layer17 = nn.Sequential(nn.Conv2d(320, 320, kernel_size=3, stride=1, padding=1), nn.BatchNorm2d(320), nn.ReLU())
            self.layer18 = nn.Sequential(nn.Conv2d(320, 320, kernel_size=3, stride=1, padding=1), nn.BatchNorm2d(320), nn.ReLU())
            self.layerf3  = nn.Conv2d(320, 256, kernel_size=1, stride=1, padding=0)
            self.layer19 = nn.Sequential(nn.Conv2d(320, 640, kernel_size=3, stride=2, padding=1), nn.BatchNorm2d(640), nn.ReLU())
            self.layer20 = nn.Sequential(nn.Conv2d(640, 640, kernel_size=3, stride=1, padding=1), nn.BatchNorm2d(640), nn.ReLU())
            self.layer21 = nn.Sequential(nn.Conv2d(640, 640, kernel_size=3, stride=1, padding=1), nn.BatchNorm2d(640), nn.ReLU())
            self.layerf4  = nn.Conv2d(640, 512, kernel_size=1, stride=1, padding=0)
        if alt=='small':
            self.layer1  = nn.Sequential(nn.Conv2d(3, 16, kernel_size=3, stride=2, padding=1), nn.BatchNorm2d(16), nn.ReLU())
            self.layer2  = nn.Sequential(nn.Conv2d(16, 16, kernel_size=3, stride=1, padding=1), nn.BatchNorm2d(16), nn.ReLU())
            self.layer3  = nn.Sequential(nn.Conv2d(16, 16, kernel_size=3, stride=1, padding=1), nn.BatchNorm2d(16), nn.ReLU())
            self.layer4  = nn.Sequential(nn.Conv2d(16, 32, kernel_size=3, stride=2, padding=1), nn.BatchNorm2d(32), nn.ReLU())
            self.layer5  = nn.Sequential(nn.Conv2d(32, 32, kernel_size=3, stride=1, padding=1), nn.BatchNorm2d(32), nn.ReLU())
            self.layer6  = nn.Sequential(nn.Conv2d(32, 32, kernel_size=3, stride=1, padding=1), nn.BatchNorm2d(32), nn.ReLU())
            self.layer7  = nn.Sequential(nn.Conv2d(32, 64, kernel_size=3, stride=2, padding=1), nn.BatchNorm2d(64), nn.ReLU())
            self.layer8  = nn.Sequential(nn.Conv2d(64, 64, kernel_size=3, stride=1, padding=1), nn.BatchNorm2d(64), nn.ReLU())
            self.layer9  = nn.Sequential(nn.Conv2d(64, 64, kernel_size=3, stride=1, padding=1), nn.BatchNorm2d(64), nn.ReLU())
            self.layerf0  = nn.Conv2d(64, 64, kernel_size=1, stride=1, padding=0)
            self.layer10 = nn.Sequential(nn.Conv2d(64, 64, kernel_size=3, stride=2, padding=1), nn.BatchNorm2d(64), nn.ReLU())
            self.layer11 = nn.Sequential(nn.Conv2d(64, 64, kernel_size=3, stride=1, padding=1), nn.BatchNorm2d(64), nn.ReLU())
            self.layer12 = nn.Sequential(nn.Conv2d(64, 64, kernel_size=3, stride=1, padding=1), nn.BatchNorm2d(64), nn.ReLU())
            self.layerf1  = nn.Conv2d(64, 64, kernel_size=1, stride=1, padding=0)
            self.layer13 = nn.Sequential(nn.Conv2d(64, 128, kernel_size=3, stride=2, padding=1), nn.BatchNorm2d(128), nn.ReLU())
            self.layer14 = nn.Sequential(nn.Conv2d(128, 128, kernel_size=3, stride=1, padding=1), nn.BatchNorm2d(128), nn.ReLU())
            self.layer15 = nn.Sequential(nn.Conv2d(128, 128, kernel_size=3, stride=1, padding=1), nn.BatchNorm2d(128), nn.ReLU())
            self.layerf2  = nn.Conv2d(128, 128, kernel_size=1, stride=1, padding=0)
            self.layer16 = nn.Sequential(nn.Conv2d(128, 256, kernel_size=3, stride=2, padding=1), nn.BatchNorm2d(256), nn.ReLU())
            self.layer17 = nn.Sequential(nn.Conv2d(256, 256, kernel_size=3, stride=1, padding=1), nn.BatchNorm2d(256), nn.ReLU())
            self.layer18 = nn.Sequential(nn.Conv2d(256, 256, kernel_size=3, stride=1, padding=1), nn.BatchNorm2d(256), nn.ReLU())
            self.layerf3  = nn.Conv2d(256, 256, kernel_size=1, stride=1, padding=0)
            self.layer19 = nn.Sequential(nn.Conv2d(256, 512, kernel_size=3, stride=2, padding=1), nn.BatchNorm2d(512), nn.ReLU())
            self.layer20 = nn.Sequential(nn.Conv2d(512, 512, kernel_size=3, stride=1, padding=1), nn.BatchNorm2d(512), nn.ReLU())
            self.layer21 = nn.Sequential(nn.Conv2d(512, 512, kernel_size=3, stride=1, padding=1), nn.BatchNorm2d(512), nn.ReLU())
            self.layerf4  = nn.Conv2d(512, 512, kernel_size=1, stride=1, padding=0)

    def forward(self, x):
        out = self.layer1(x)
        out = self.layer2(out)
        out = self.layer3(out)
        out = self.layer4(out)
        out = self.layer5(out)
        out = self.layer6(out)
        out = self.layer7(out)
        out = self.layer8(out)
        out = self.layer9(out)
        f0 = self.layerf0(out)
        out = self.layer10(out)
        out = self.layer11(out)
        out = self.layer12(out)
        f1 = self.layerf1(out)
        out = self.layer13(out)
        out = self.layer14(out)
        out = self.layer15(out)
        f2 = self.layerf2(out)
        out = self.layer16(out)
        out = self.layer17(out)
        out = self.layer18(out)
        f3 = self.layerf3(out)
        out = self.layer19(out)
        out = self.layer20(out)
        out = self.layer21(out)
        f4 = self.layerf4(out)
        return f0,f1,f2,f3,f4

    def fuse_conv_and_bn(self,conv,bn):
        fusedconv = torch.nn.Conv2d(conv.in_channels, conv.out_channels, kernel_size=conv.kernel_size, stride=conv.stride, padding=conv.padding, bias=True)
        w_eff = conv.weight.clone()
        b_eff = conv.bias.clone()
        with torch.no_grad():
            for i in range(conv.out_channels):
                w_eff[i,:,:,:] = torch.div(torch.mul(bn.weight[i],w_eff[i,:,:,:]),torch.sqrt(bn.running_var[i]+bn.eps))
                b_eff[i] = torch.add(torch.div(torch.mul(bn.weight[i],torch.sub(b_eff[i],bn.running_mean[i])),torch.sqrt(bn.running_var[i]+bn.eps)),bn.bias[i])
        fusedconv.weight.data = w_eff.data
        fusedconv.bias.data = b_eff.data
        return fusedconv

    def fuse_save(self, fn):
        # merge BN with previous Conv2D
        self.layer1 = nn.Sequential(self.fuse_conv_and_bn(self.layer1[0],self.layer1[1]), nn.ReLU())
        self.layer2 = nn.Sequential(self.fuse_conv_and_bn(self.layer2[0],self.layer2[1]), nn.ReLU())
        self.layer3 = nn.Sequential(self.fuse_conv_and_bn(self.layer3[0],self.layer3[1]), nn.ReLU())
        self.layer4 = nn.Sequential(self.fuse_conv_and_bn(self.layer4[0],self.layer4[1]), nn.ReLU())
        self.layer5 = nn.Sequential(self.fuse_conv_and_bn(self.layer5[0],self.layer5[1]), nn.ReLU())
        self.layer6 = nn.Sequential(self.fuse_conv_and_bn(self.layer6[0],self.layer6[1]), nn.ReLU())
        self.layer7 = nn.Sequential(self.fuse_conv_and_bn(self.layer7[0],self.layer7[1]), nn.ReLU())
        self.layer8 = nn.Sequential(self.fuse_conv_and_bn(self.layer8[0],self.layer8[1]), nn.ReLU())
        self.layer9 = nn.Sequential(self.fuse_conv_and_bn(self.layer9[0],self.layer9[1]), nn.ReLU())
        self.layer10 = nn.Sequential(self.fuse_conv_and_bn(self.layer10[0],self.layer10[1]), nn.ReLU())
        self.layer11 = nn.Sequential(self.fuse_conv_and_bn(self.layer11[0],self.layer11[1]), nn.ReLU())
        self.layer12 = nn.Sequential(self.fuse_conv_and_bn(self.layer12[0],self.layer12[1]), nn.ReLU())
        self.layer13 = nn.Sequential(self.fuse_conv_and_bn(self.layer13[0],self.layer13[1]), nn.ReLU())
        self.layer14 = nn.Sequential(self.fuse_conv_and_bn(self.layer14[0],self.layer14[1]), nn.ReLU())
        self.layer15 = nn.Sequential(self.fuse_conv_and_bn(self.layer15[0],self.layer15[1]), nn.ReLU())
        self.layer16 = nn.Sequential(self.fuse_conv_and_bn(self.layer16[0],self.layer16[1]), nn.ReLU())
        self.layer17 = nn.Sequential(self.fuse_conv_and_bn(self.layer17[0],self.layer17[1]), nn.ReLU())
        self.layer18 = nn.Sequential(self.fuse_conv_and_bn(self.layer18[0],self.layer18[1]), nn.ReLU())
        self.layer19 = nn.Sequential(self.fuse_conv_and_bn(self.layer19[0],self.layer19[1]), nn.ReLU())
        self.layer20 = nn.Sequential(self.fuse_conv_and_bn(self.layer20[0],self.layer20[1]), nn.ReLU())
        self.layer21 = nn.Sequential(self.fuse_conv_and_bn(self.layer21[0],self.layer21[1]), nn.ReLU())
        torch.save(self, fn) # TBD
